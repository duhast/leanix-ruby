=begin
#Pathfinder

#Core application for storage and analysis of IT landscape data

The version of the OpenAPI document: 5.0.1100

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.2.0

=end

require 'cgi'

module LeanixApi
  class SettingsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # getFactSheetSettings
    # @param fact_sheet_type [String] 
    # @param [Hash] opts the optional parameters
    # @return [FactSheetSettingsResponse]
    def get_model_customization(fact_sheet_type, opts = {})
      data, _status_code, _headers = get_model_customization_with_http_info(fact_sheet_type, opts)
      data
    end

    # getFactSheetSettings
    # @param fact_sheet_type [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FactSheetSettingsResponse, Integer, Hash)>] FactSheetSettingsResponse data, response status code and response headers
    def get_model_customization_with_http_info(fact_sheet_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.get_model_customization ...'
      end
      # verify the required parameter 'fact_sheet_type' is set
      if @api_client.config.client_side_validation && fact_sheet_type.nil?
        fail ArgumentError, "Missing the required parameter 'fact_sheet_type' when calling SettingsApi.get_model_customization"
      end
      # resource path
      local_var_path = '/settings/factSheets/{factSheetType}'.sub('{' + 'factSheetType' + '}', CGI.escape(fact_sheet_type.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FactSheetSettingsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"SettingsApi.get_model_customization",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#get_model_customization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getSettings
    # @param [Hash] opts the optional parameters
    # @option opts [String] :workspace_id The workspace id to fetch settings for.
    # @return [SettingsResponse]
    def get_settings(opts = {})
      data, _status_code, _headers = get_settings_with_http_info(opts)
      data
    end

    # getSettings
    # @param [Hash] opts the optional parameters
    # @option opts [String] :workspace_id The workspace id to fetch settings for.
    # @return [Array<(SettingsResponse, Integer, Hash)>] SettingsResponse data, response status code and response headers
    def get_settings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.get_settings ...'
      end
      # resource path
      local_var_path = '/settings'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'workspaceId'] = opts[:'workspace_id'] if !opts[:'workspace_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SettingsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"SettingsApi.get_settings",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#get_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # putFactSheetSettings
    # @param fact_sheet_type [String] 
    # @param body [FactSheetSettings] customization
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_models_with_customization(fact_sheet_type, body, opts = {})
      update_models_with_customization_with_http_info(fact_sheet_type, body, opts)
      nil
    end

    # putFactSheetSettings
    # @param fact_sheet_type [String] 
    # @param body [FactSheetSettings] customization
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_models_with_customization_with_http_info(fact_sheet_type, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.update_models_with_customization ...'
      end
      # verify the required parameter 'fact_sheet_type' is set
      if @api_client.config.client_side_validation && fact_sheet_type.nil?
        fail ArgumentError, "Missing the required parameter 'fact_sheet_type' when calling SettingsApi.update_models_with_customization"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling SettingsApi.update_models_with_customization"
      end
      # resource path
      local_var_path = '/settings/factSheets/{factSheetType}'.sub('{' + 'factSheetType' + '}', CGI.escape(fact_sheet_type.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"SettingsApi.update_models_with_customization",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#update_models_with_customization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # updateSettings
    # @param body [WorkspaceSettings] the settings for the workspace
    # @param [Hash] opts the optional parameters
    # @return [Response]
    def update_settings(body, opts = {})
      data, _status_code, _headers = update_settings_with_http_info(body, opts)
      data
    end

    # updateSettings
    # @param body [WorkspaceSettings] the settings for the workspace
    # @param [Hash] opts the optional parameters
    # @return [Array<(Response, Integer, Hash)>] Response data, response status code and response headers
    def update_settings_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsApi.update_settings ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling SettingsApi.update_settings"
      end
      # resource path
      local_var_path = '/settings'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"SettingsApi.update_settings",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsApi#update_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

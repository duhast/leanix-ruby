=begin
#Pathfinder

#Core application for storage and analysis of IT landscape data

The version of the OpenAPI document: 5.0.1100

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.2.0

=end

require 'cgi'

module LeanixApi
  class SearchbookmarksApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # getBookmarkSuggestions
    # Returns a list of bookmark suggestions. Deprecated (will sunset on 2024-04-30T23:59:59Z. Use /services/navigation/v1/navigationItems/search instead. OpenAPI: https://eu.leanix.net/openapi-explorer/?urls.primaryName=Navigation.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type Bookmark type
    # @option opts [Array<String>] :subtype A list of bookmark subtypes. This parameter needs to be specified multiple times: once for each subtype value, e.g., subtype&#x3D;bc-cost&amp;subtype&#x3D;bc-map
    # @option opts [String] :q Search term
    # @option opts [Boolean] :personalized Personalized (default to false)
    # @option opts [String] :sort Sorting. Default sorting criterion is bookmark name.
    # @option opts [Array<String>] :cursor Pagination cursor. The result page will start with the entry immediately after the entry corresponding to the cursor. Order of the cursor values matters.This parameter needs to be specified multiple times: once for each entry in the list, e.g., cursor&#x3D;b2h5by1vaHlv&amp;cursor&#x3D;Ym9va21hcmsj
    # @option opts [Integer] :page_size Page size (default to 40)
    # @option opts [String] :sort_direction The direction of the sorting. Default sorting order for name is ASC, for date fields - DSC.
    # @option opts [String] :fact_sheet_id FactSheet ID, which must appear in bookmark (applicable only to bookmarks of BookmarkType VISUALIZER)
    # @option opts [Boolean] :owned_by_me If set, then only bookmarks with an owner equal to the user id of the auth token are returned. (default to false)
    # @option opts [Boolean] :shared_with_me If set, then only bookmarks that are shared with the user id of the auth token are returned. (default to false)
    # @option opts [Boolean] :predefined_only Indicates if only predefined bookmarks should be returned. (default to false)
    # @option opts [Boolean] :userdefined_only Indicates if only userdefined bookmarks should be returned. (default to false)
    # @option opts [String] :visibility If UNRESTRICTED_READ, only bookmarks readable by everyone are returned.
    # @return [BookmarkSuggestionsResponse]
    def get_bookmark_suggestions(opts = {})
      data, _status_code, _headers = get_bookmark_suggestions_with_http_info(opts)
      data
    end

    # getBookmarkSuggestions
    # Returns a list of bookmark suggestions. Deprecated (will sunset on 2024-04-30T23:59:59Z. Use /services/navigation/v1/navigationItems/search instead. OpenAPI: https://eu.leanix.net/openapi-explorer/?urls.primaryName&#x3D;Navigation.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type Bookmark type
    # @option opts [Array<String>] :subtype A list of bookmark subtypes. This parameter needs to be specified multiple times: once for each subtype value, e.g., subtype&#x3D;bc-cost&amp;subtype&#x3D;bc-map
    # @option opts [String] :q Search term
    # @option opts [Boolean] :personalized Personalized (default to false)
    # @option opts [String] :sort Sorting. Default sorting criterion is bookmark name.
    # @option opts [Array<String>] :cursor Pagination cursor. The result page will start with the entry immediately after the entry corresponding to the cursor. Order of the cursor values matters.This parameter needs to be specified multiple times: once for each entry in the list, e.g., cursor&#x3D;b2h5by1vaHlv&amp;cursor&#x3D;Ym9va21hcmsj
    # @option opts [Integer] :page_size Page size (default to 40)
    # @option opts [String] :sort_direction The direction of the sorting. Default sorting order for name is ASC, for date fields - DSC.
    # @option opts [String] :fact_sheet_id FactSheet ID, which must appear in bookmark (applicable only to bookmarks of BookmarkType VISUALIZER)
    # @option opts [Boolean] :owned_by_me If set, then only bookmarks with an owner equal to the user id of the auth token are returned. (default to false)
    # @option opts [Boolean] :shared_with_me If set, then only bookmarks that are shared with the user id of the auth token are returned. (default to false)
    # @option opts [Boolean] :predefined_only Indicates if only predefined bookmarks should be returned. (default to false)
    # @option opts [Boolean] :userdefined_only Indicates if only userdefined bookmarks should be returned. (default to false)
    # @option opts [String] :visibility If UNRESTRICTED_READ, only bookmarks readable by everyone are returned.
    # @return [Array<(BookmarkSuggestionsResponse, Integer, Hash)>] BookmarkSuggestionsResponse data, response status code and response headers
    def get_bookmark_suggestions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SearchbookmarksApi.get_bookmark_suggestions ...'
      end
      allowable_values = ["INVENTORY", "REPORTING", "VISUALIZER", "DASHBOARD", "INVENTORY_EXPORT"]
      if @api_client.config.client_side_validation && opts[:'type'] && !allowable_values.include?(opts[:'type'])
        fail ArgumentError, "invalid value for \"type\", must be one of #{allowable_values}"
      end
      allowable_values = ["PERSONALIZED_RELEVANCE", "CREATED_AT", "UPDATED_AT", "LAST_SHARED_WITH_ME_AT", "MY_VIEWS", "VIEWS"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 100
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SearchbookmarksApi.get_bookmark_suggestions, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling SearchbookmarksApi.get_bookmark_suggestions, must be greater than or equal to 1.'
      end

      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && opts[:'sort_direction'] && !allowable_values.include?(opts[:'sort_direction'])
        fail ArgumentError, "invalid value for \"sort_direction\", must be one of #{allowable_values}"
      end
      allowable_values = ["UNRESTRICTED_READ"]
      if @api_client.config.client_side_validation && opts[:'visibility'] && !allowable_values.include?(opts[:'visibility'])
        fail ArgumentError, "invalid value for \"visibility\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/search/bookmarks'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'subtype'] = @api_client.build_collection_param(opts[:'subtype'], :multi) if !opts[:'subtype'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?
      query_params[:'personalized'] = opts[:'personalized'] if !opts[:'personalized'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'cursor'] = @api_client.build_collection_param(opts[:'cursor'], :multi) if !opts[:'cursor'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sortDirection'] = opts[:'sort_direction'] if !opts[:'sort_direction'].nil?
      query_params[:'factSheetId'] = opts[:'fact_sheet_id'] if !opts[:'fact_sheet_id'].nil?
      query_params[:'ownedByMe'] = opts[:'owned_by_me'] if !opts[:'owned_by_me'].nil?
      query_params[:'sharedWithMe'] = opts[:'shared_with_me'] if !opts[:'shared_with_me'].nil?
      query_params[:'predefinedOnly'] = opts[:'predefined_only'] if !opts[:'predefined_only'].nil?
      query_params[:'userdefinedOnly'] = opts[:'userdefined_only'] if !opts[:'userdefined_only'].nil?
      query_params[:'visibility'] = opts[:'visibility'] if !opts[:'visibility'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BookmarkSuggestionsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"SearchbookmarksApi.get_bookmark_suggestions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SearchbookmarksApi#get_bookmark_suggestions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

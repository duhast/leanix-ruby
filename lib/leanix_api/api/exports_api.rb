=begin
#Pathfinder

#Core application for storage and analysis of IT landscape data

The version of the OpenAPI document: 5.0.1100

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.2.0

=end

require 'cgi'

module LeanixApi
  class ExportsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # createExportFile
    # DEPRECATED: Use https://<your-instance>.leanix.net/services/import-export/v1/exports instead.
    # @param [Hash] opts the optional parameters
    # @return [JobResponse]
    def create_export_file(opts = {})
      data, _status_code, _headers = create_export_file_with_http_info(opts)
      data
    end

    # createExportFile
    # DEPRECATED: Use https://&lt;your-instance&gt;.leanix.net/services/import-export/v1/exports instead.
    # @param [Hash] opts the optional parameters
    # @return [Array<(JobResponse, Integer, Hash)>] JobResponse data, response status code and response headers
    def create_export_file_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExportsApi.create_export_file ...'
      end
      # resource path
      local_var_path = '/exports/excel'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'JobResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"ExportsApi.create_export_file",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExportsApi#create_export_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # createFullExport
    # Creates a full export of the workspace data, or an export of the changelog, depending on given type
    # @param [Hash] opts the optional parameters
    # @option opts [String] :export_type The type of the export, must be either SNAPSHOT, AUDIT_LOG or AUDIT_LOG_LEGACY
    # @option opts [String] :start_date The start date of the audit log export in ISO-8601 format.
    # @option opts [String] :end_date The end date of the audit log export in ISO-8601 format. If left empty today is assumed
    # @return [JobResponse]
    def create_full_export(opts = {})
      data, _status_code, _headers = create_full_export_with_http_info(opts)
      data
    end

    # createFullExport
    # Creates a full export of the workspace data, or an export of the changelog, depending on given type
    # @param [Hash] opts the optional parameters
    # @option opts [String] :export_type The type of the export, must be either SNAPSHOT, AUDIT_LOG or AUDIT_LOG_LEGACY
    # @option opts [String] :start_date The start date of the audit log export in ISO-8601 format.
    # @option opts [String] :end_date The end date of the audit log export in ISO-8601 format. If left empty today is assumed
    # @return [Array<(JobResponse, Integer, Hash)>] JobResponse data, response status code and response headers
    def create_full_export_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExportsApi.create_full_export ...'
      end
      allowable_values = ["AUDIT_LOG", "SNAPSHOT", "INVENTORY_IMPORT", "INVENTORY_EXPORT", "WS_SYNC", "REPORT_SYNC", "AUDIT_LOG_LEGACY", "ARCHIVE"]
      if @api_client.config.client_side_validation && opts[:'export_type'] && !allowable_values.include?(opts[:'export_type'])
        fail ArgumentError, "invalid value for \"export_type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/exports/fullExport'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'exportType'] = opts[:'export_type'] if !opts[:'export_type'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'JobResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"ExportsApi.create_full_export",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExportsApi#create_full_export\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # downloadExportFile
    # @param workspace_id [String] the ID of the workspace to retrieve the download for
    # @param key [String] a one time use key identifying the download to retrieve
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def download_export_file(workspace_id, key, opts = {})
      download_export_file_with_http_info(workspace_id, key, opts)
      nil
    end

    # downloadExportFile
    # @param workspace_id [String] the ID of the workspace to retrieve the download for
    # @param key [String] a one time use key identifying the download to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def download_export_file_with_http_info(workspace_id, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExportsApi.download_export_file ...'
      end
      # verify the required parameter 'workspace_id' is set
      if @api_client.config.client_side_validation && workspace_id.nil?
        fail ArgumentError, "Missing the required parameter 'workspace_id' when calling ExportsApi.download_export_file"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling ExportsApi.download_export_file"
      end
      # resource path
      local_var_path = '/exports/downloads/{workspaceId}'.sub('{' + 'workspaceId' + '}', CGI.escape(workspace_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'key'] = key

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"ExportsApi.download_export_file",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExportsApi#download_export_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getExports
    # Lists all exports of the given type in the workspace of the authorized user
    # @param [Hash] opts the optional parameters
    # @option opts [String] :export_type Comma separated list of types of exports to return, if left empty AUDIT_LOG and SNAPSHOT, and AUDIT_LOG_LEGACY exports are returned
    # @option opts [String] :user_id Retrieve exports initiated by the given user
    # @option opts [Integer] :page_size Number of Exports to return, maximum is 100 (default to 40)
    # @option opts [String] :cursor Marks the position of the first element that should be returned
    # @option opts [String] :sorting the field to sort the results by (default to 'createdAt')
    # @option opts [String] :sort_direction the direction of the sorting (default to 'ASC')
    # @return [ExportListResponse]
    def get_exports(opts = {})
      data, _status_code, _headers = get_exports_with_http_info(opts)
      data
    end

    # getExports
    # Lists all exports of the given type in the workspace of the authorized user
    # @param [Hash] opts the optional parameters
    # @option opts [String] :export_type Comma separated list of types of exports to return, if left empty AUDIT_LOG and SNAPSHOT, and AUDIT_LOG_LEGACY exports are returned
    # @option opts [String] :user_id Retrieve exports initiated by the given user
    # @option opts [Integer] :page_size Number of Exports to return, maximum is 100 (default to 40)
    # @option opts [String] :cursor Marks the position of the first element that should be returned
    # @option opts [String] :sorting the field to sort the results by (default to 'createdAt')
    # @option opts [String] :sort_direction the direction of the sorting (default to 'ASC')
    # @return [Array<(ExportListResponse, Integer, Hash)>] ExportListResponse data, response status code and response headers
    def get_exports_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExportsApi.get_exports ...'
      end
      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && opts[:'sort_direction'] && !allowable_values.include?(opts[:'sort_direction'])
        fail ArgumentError, "invalid value for \"sort_direction\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/exports'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'exportType'] = opts[:'export_type'] if !opts[:'export_type'].nil?
      query_params[:'userId'] = opts[:'user_id'] if !opts[:'user_id'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'sorting'] = opts[:'sorting'] if !opts[:'sorting'].nil?
      query_params[:'sortDirection'] = opts[:'sort_direction'] if !opts[:'sort_direction'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ExportListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"ExportsApi.get_exports",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExportsApi#get_exports\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

=begin
#Pathfinder

#Core application for storage and analysis of IT landscape data

The version of the OpenAPI document: 5.0.1100

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.2.0

=end

require 'cgi'

module LeanixApi
  class FactSheetsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # archiveFactSheet
    # Archives a Fact Sheet
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [FactSheetArchiveParameter] :body Contains the comment and the Fact Sheet revision
    # @return [nil]
    def archive_fact_sheet(id, opts = {})
      archive_fact_sheet_with_http_info(id, opts)
      nil
    end

    # archiveFactSheet
    # Archives a Fact Sheet
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [FactSheetArchiveParameter] :body Contains the comment and the Fact Sheet revision
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def archive_fact_sheet_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FactSheetsApi.archive_fact_sheet ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling FactSheetsApi.archive_fact_sheet"
      end
      # resource path
      local_var_path = '/factSheets/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"FactSheetsApi.archive_fact_sheet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FactSheetsApi#archive_fact_sheet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # createFactSheet
    # Creates a Fact Sheet
    # @param body [FactSheet] Fact Sheet to add
    # @param [Hash] opts the optional parameters
    # @return [FactSheetResponse]
    def create_fact_sheet(body, opts = {})
      data, _status_code, _headers = create_fact_sheet_with_http_info(body, opts)
      data
    end

    # createFactSheet
    # Creates a Fact Sheet
    # @param body [FactSheet] Fact Sheet to add
    # @param [Hash] opts the optional parameters
    # @return [Array<(FactSheetResponse, Integer, Hash)>] FactSheetResponse data, response status code and response headers
    def create_fact_sheet_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FactSheetsApi.create_fact_sheet ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling FactSheetsApi.create_fact_sheet"
      end
      # resource path
      local_var_path = '/factSheets'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'FactSheetResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"FactSheetsApi.create_fact_sheet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FactSheetsApi#create_fact_sheet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # createFactSheetRelation
    # Creates the given relation with the Fact Sheet as one side of the relation. When adding constraining relations only the ID of these relations will be used.
    # @param id [String] 
    # @param relation [FactSheetRelation] 
    # @param [Hash] opts the optional parameters
    # @return [RelationResponse]
    def create_fact_sheet_relation(id, relation, opts = {})
      data, _status_code, _headers = create_fact_sheet_relation_with_http_info(id, relation, opts)
      data
    end

    # createFactSheetRelation
    # Creates the given relation with the Fact Sheet as one side of the relation. When adding constraining relations only the ID of these relations will be used.
    # @param id [String] 
    # @param relation [FactSheetRelation] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RelationResponse, Integer, Hash)>] RelationResponse data, response status code and response headers
    def create_fact_sheet_relation_with_http_info(id, relation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FactSheetsApi.create_fact_sheet_relation ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling FactSheetsApi.create_fact_sheet_relation"
      end
      # verify the required parameter 'relation' is set
      if @api_client.config.client_side_validation && relation.nil?
        fail ArgumentError, "Missing the required parameter 'relation' when calling FactSheetsApi.create_fact_sheet_relation"
      end
      # resource path
      local_var_path = '/factSheets/{id}/relations'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(relation)

      # return_type
      return_type = opts[:debug_return_type] || 'RelationResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"FactSheetsApi.create_fact_sheet_relation",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FactSheetsApi#create_fact_sheet_relation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # deleteFactSheetRelation
    # Deletes the given relation.
    # @param id [String] 
    # @param relation_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_fact_sheet_relation(id, relation_id, opts = {})
      delete_fact_sheet_relation_with_http_info(id, relation_id, opts)
      nil
    end

    # deleteFactSheetRelation
    # Deletes the given relation.
    # @param id [String] 
    # @param relation_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_fact_sheet_relation_with_http_info(id, relation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FactSheetsApi.delete_fact_sheet_relation ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling FactSheetsApi.delete_fact_sheet_relation"
      end
      # verify the required parameter 'relation_id' is set
      if @api_client.config.client_side_validation && relation_id.nil?
        fail ArgumentError, "Missing the required parameter 'relation_id' when calling FactSheetsApi.delete_fact_sheet_relation"
      end
      # resource path
      local_var_path = '/factSheets/{id}/relations/{relationId}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'relationId' + '}', CGI.escape(relation_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"FactSheetsApi.delete_fact_sheet_relation",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FactSheetsApi#delete_fact_sheet_relation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getFactSheet
    # Retrieves a Fact Sheet
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :relation_types Comma separated list of relation types to show on the Fact Sheets
    # @option opts [Boolean] :permissions Show a permission field for the Fact Sheet (default to false)
    # @return [FactSheetResponse]
    def get_fact_sheet(id, opts = {})
      data, _status_code, _headers = get_fact_sheet_with_http_info(id, opts)
      data
    end

    # getFactSheet
    # Retrieves a Fact Sheet
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :relation_types Comma separated list of relation types to show on the Fact Sheets
    # @option opts [Boolean] :permissions Show a permission field for the Fact Sheet (default to false)
    # @return [Array<(FactSheetResponse, Integer, Hash)>] FactSheetResponse data, response status code and response headers
    def get_fact_sheet_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FactSheetsApi.get_fact_sheet ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling FactSheetsApi.get_fact_sheet"
      end
      # resource path
      local_var_path = '/factSheets/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'relationTypes'] = opts[:'relation_types'] if !opts[:'relation_types'].nil?
      query_params[:'permissions'] = opts[:'permissions'] if !opts[:'permissions'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FactSheetResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"FactSheetsApi.get_fact_sheet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FactSheetsApi#get_fact_sheet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getFactSheetHierarchy
    # Retrieves a list of all Fact Sheets equal to or below a certain root Fact Sheet
    # @param root_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Number of Fact Sheets to return, maximum is 5000 (default to 40)
    # @option opts [String] :cursor Marks the position of the first element that should be returned
    # @return [FactSheetListResponse]
    def get_fact_sheet_hierarchy(root_id, opts = {})
      data, _status_code, _headers = get_fact_sheet_hierarchy_with_http_info(root_id, opts)
      data
    end

    # getFactSheetHierarchy
    # Retrieves a list of all Fact Sheets equal to or below a certain root Fact Sheet
    # @param root_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Number of Fact Sheets to return, maximum is 5000 (default to 40)
    # @option opts [String] :cursor Marks the position of the first element that should be returned
    # @return [Array<(FactSheetListResponse, Integer, Hash)>] FactSheetListResponse data, response status code and response headers
    def get_fact_sheet_hierarchy_with_http_info(root_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FactSheetsApi.get_fact_sheet_hierarchy ...'
      end
      # verify the required parameter 'root_id' is set
      if @api_client.config.client_side_validation && root_id.nil?
        fail ArgumentError, "Missing the required parameter 'root_id' when calling FactSheetsApi.get_fact_sheet_hierarchy"
      end
      # resource path
      local_var_path = '/factSheets/hierarchy/{rootId}'.sub('{' + 'rootId' + '}', CGI.escape(root_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FactSheetListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"FactSheetsApi.get_fact_sheet_hierarchy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FactSheetsApi#get_fact_sheet_hierarchy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getFactSheetRelations
    # Retrieves all relations of a Fact Sheet, with the given type
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type Only return relations of this type
    # @option opts [Boolean] :with_fact_sheets Include the to Fact Sheet in the relation
    # @return [RelationListResponse]
    def get_fact_sheet_relations(id, opts = {})
      data, _status_code, _headers = get_fact_sheet_relations_with_http_info(id, opts)
      data
    end

    # getFactSheetRelations
    # Retrieves all relations of a Fact Sheet, with the given type
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type Only return relations of this type
    # @option opts [Boolean] :with_fact_sheets Include the to Fact Sheet in the relation
    # @return [Array<(RelationListResponse, Integer, Hash)>] RelationListResponse data, response status code and response headers
    def get_fact_sheet_relations_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FactSheetsApi.get_fact_sheet_relations ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling FactSheetsApi.get_fact_sheet_relations"
      end
      # resource path
      local_var_path = '/factSheets/{id}/relations'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'withFactSheets'] = opts[:'with_fact_sheets'] if !opts[:'with_fact_sheets'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RelationListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"FactSheetsApi.get_fact_sheet_relations",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FactSheetsApi#get_fact_sheet_relations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getFactSheets
    # Retrieves all Fact Sheets
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type Comma separated list of Fact Sheets types to list, leave empty for all
    # @option opts [String] :relation_types Comma separated list of relation types to show on the Fact Sheets
    # @option opts [String] :fields Comma separated list of fields to show on the Fact Sheets, leave empty for all
    # @option opts [Boolean] :archived_only Retrieve archived fact sheets instead of active ones (default to false)
    # @option opts [Integer] :page_size Number of Fact Sheets to return, maximum is 5000 (default to 40)
    # @option opts [String] :cursor Marks the position of the first element that should be returned
    # @option opts [Boolean] :permissions Show a permission field for the Fact Sheet (default to false)
    # @option opts [Boolean] :completion Show completion status for the Fact Sheet (default to true)
    # @option opts [Boolean] :documents Include documents of the Fact Sheet (default to true)
    # @option opts [Boolean] :tags Include tags of the Fact Sheet (default to true)
    # @option opts [Boolean] :subscriptions Include subscriptions of the Fact Sheet (default to true)
    # @option opts [Boolean] :constraining_relations Include constraining relations of the relations of the Fact Sheet (default to false)
    # @return [FactSheetListResponse]
    def get_fact_sheets(opts = {})
      data, _status_code, _headers = get_fact_sheets_with_http_info(opts)
      data
    end

    # getFactSheets
    # Retrieves all Fact Sheets
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type Comma separated list of Fact Sheets types to list, leave empty for all
    # @option opts [String] :relation_types Comma separated list of relation types to show on the Fact Sheets
    # @option opts [String] :fields Comma separated list of fields to show on the Fact Sheets, leave empty for all
    # @option opts [Boolean] :archived_only Retrieve archived fact sheets instead of active ones (default to false)
    # @option opts [Integer] :page_size Number of Fact Sheets to return, maximum is 5000 (default to 40)
    # @option opts [String] :cursor Marks the position of the first element that should be returned
    # @option opts [Boolean] :permissions Show a permission field for the Fact Sheet (default to false)
    # @option opts [Boolean] :completion Show completion status for the Fact Sheet (default to true)
    # @option opts [Boolean] :documents Include documents of the Fact Sheet (default to true)
    # @option opts [Boolean] :tags Include tags of the Fact Sheet (default to true)
    # @option opts [Boolean] :subscriptions Include subscriptions of the Fact Sheet (default to true)
    # @option opts [Boolean] :constraining_relations Include constraining relations of the relations of the Fact Sheet (default to false)
    # @return [Array<(FactSheetListResponse, Integer, Hash)>] FactSheetListResponse data, response status code and response headers
    def get_fact_sheets_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FactSheetsApi.get_fact_sheets ...'
      end
      # resource path
      local_var_path = '/factSheets'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'relationTypes'] = opts[:'relation_types'] if !opts[:'relation_types'].nil?
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?
      query_params[:'archivedOnly'] = opts[:'archived_only'] if !opts[:'archived_only'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'permissions'] = opts[:'permissions'] if !opts[:'permissions'].nil?
      query_params[:'completion'] = opts[:'completion'] if !opts[:'completion'].nil?
      query_params[:'documents'] = opts[:'documents'] if !opts[:'documents'].nil?
      query_params[:'tags'] = opts[:'tags'] if !opts[:'tags'].nil?
      query_params[:'subscriptions'] = opts[:'subscriptions'] if !opts[:'subscriptions'].nil?
      query_params[:'constrainingRelations'] = opts[:'constraining_relations'] if !opts[:'constraining_relations'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FactSheetListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"FactSheetsApi.get_fact_sheets",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FactSheetsApi#get_fact_sheets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # updateFactSheet
    # Deprecated. Please use the GraphQL API: Do a mutation operation containing the updateFactSheet field.
    # @param id [String] 
    # @param body [FactSheet] Fact Sheet to update
    # @param [Hash] opts the optional parameters
    # @option opts [String] :relation_types Comma separated list of relation types to update. If no types are set, the relations will not be changed.
    # @return [FactSheetResponse]
    def update_fact_sheet(id, body, opts = {})
      data, _status_code, _headers = update_fact_sheet_with_http_info(id, body, opts)
      data
    end

    # updateFactSheet
    # Deprecated. Please use the GraphQL API: Do a mutation operation containing the updateFactSheet field.
    # @param id [String] 
    # @param body [FactSheet] Fact Sheet to update
    # @param [Hash] opts the optional parameters
    # @option opts [String] :relation_types Comma separated list of relation types to update. If no types are set, the relations will not be changed.
    # @return [Array<(FactSheetResponse, Integer, Hash)>] FactSheetResponse data, response status code and response headers
    def update_fact_sheet_with_http_info(id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FactSheetsApi.update_fact_sheet ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling FactSheetsApi.update_fact_sheet"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling FactSheetsApi.update_fact_sheet"
      end
      # resource path
      local_var_path = '/factSheets/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'relationTypes'] = opts[:'relation_types'] if !opts[:'relation_types'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'FactSheetResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"FactSheetsApi.update_fact_sheet",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FactSheetsApi#update_fact_sheet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # updateFactSheetRelation
    # Updates the given relation.
    # @param id [String] 
    # @param relation_id [String] 
    # @param relation [FactSheetRelation] 
    # @param [Hash] opts the optional parameters
    # @return [RelationResponse]
    def update_fact_sheet_relation(id, relation_id, relation, opts = {})
      data, _status_code, _headers = update_fact_sheet_relation_with_http_info(id, relation_id, relation, opts)
      data
    end

    # updateFactSheetRelation
    # Updates the given relation.
    # @param id [String] 
    # @param relation_id [String] 
    # @param relation [FactSheetRelation] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RelationResponse, Integer, Hash)>] RelationResponse data, response status code and response headers
    def update_fact_sheet_relation_with_http_info(id, relation_id, relation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FactSheetsApi.update_fact_sheet_relation ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling FactSheetsApi.update_fact_sheet_relation"
      end
      # verify the required parameter 'relation_id' is set
      if @api_client.config.client_side_validation && relation_id.nil?
        fail ArgumentError, "Missing the required parameter 'relation_id' when calling FactSheetsApi.update_fact_sheet_relation"
      end
      # verify the required parameter 'relation' is set
      if @api_client.config.client_side_validation && relation.nil?
        fail ArgumentError, "Missing the required parameter 'relation' when calling FactSheetsApi.update_fact_sheet_relation"
      end
      # resource path
      local_var_path = '/factSheets/{id}/relations/{relationId}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'relationId' + '}', CGI.escape(relation_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(relation)

      # return_type
      return_type = opts[:debug_return_type] || 'RelationResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"FactSheetsApi.update_fact_sheet_relation",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FactSheetsApi#update_fact_sheet_relation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

=begin
#Pathfinder

#Core application for storage and analysis of IT landscape data

The version of the OpenAPI document: 5.0.1100

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.2.0

=end

require 'cgi'

module LeanixApi
  class BookmarksApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # createBookmark
    # Saves a bookmark in the database
    # @param [Hash] opts the optional parameters
    # @option opts [Bookmark] :body bookmark
    # @return [BookmarkResponse]
    def create_bookmark(opts = {})
      data, _status_code, _headers = create_bookmark_with_http_info(opts)
      data
    end

    # createBookmark
    # Saves a bookmark in the database
    # @param [Hash] opts the optional parameters
    # @option opts [Bookmark] :body bookmark
    # @return [Array<(BookmarkResponse, Integer, Hash)>] BookmarkResponse data, response status code and response headers
    def create_bookmark_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BookmarksApi.create_bookmark ...'
      end
      # resource path
      local_var_path = '/bookmarks'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'BookmarkResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"BookmarksApi.create_bookmark",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookmarksApi#create_bookmark\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # deleteBookmark
    # Deletes a bookmark identified by the given ID
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_bookmark(id, opts = {})
      delete_bookmark_with_http_info(id, opts)
      nil
    end

    # deleteBookmark
    # Deletes a bookmark identified by the given ID
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_bookmark_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BookmarksApi.delete_bookmark ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BookmarksApi.delete_bookmark"
      end
      # resource path
      local_var_path = '/bookmarks/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"BookmarksApi.delete_bookmark",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookmarksApi#delete_bookmark\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # deleteWorkingCopy
    # Deletes a working copy for a bookmark stored in the database
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [BookmarkResponse]
    def delete_working_copy(id, opts = {})
      data, _status_code, _headers = delete_working_copy_with_http_info(id, opts)
      data
    end

    # deleteWorkingCopy
    # Deletes a working copy for a bookmark stored in the database
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BookmarkResponse, Integer, Hash)>] BookmarkResponse data, response status code and response headers
    def delete_working_copy_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BookmarksApi.delete_working_copy ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BookmarksApi.delete_working_copy"
      end
      # resource path
      local_var_path = '/bookmarks/{id}/workingCopy'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BookmarkResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"BookmarksApi.delete_working_copy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookmarksApi#delete_working_copy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getBookmark
    # Retrieves a bookmark by ID
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :mark_as_viewed  (default to true)
    # @return [BookmarkResponse]
    def get_bookmark(id, opts = {})
      data, _status_code, _headers = get_bookmark_with_http_info(id, opts)
      data
    end

    # getBookmark
    # Retrieves a bookmark by ID
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :mark_as_viewed  (default to true)
    # @return [Array<(BookmarkResponse, Integer, Hash)>] BookmarkResponse data, response status code and response headers
    def get_bookmark_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BookmarksApi.get_bookmark ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BookmarksApi.get_bookmark"
      end
      # resource path
      local_var_path = '/bookmarks/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'markAsViewed'] = opts[:'mark_as_viewed'] if !opts[:'mark_as_viewed'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BookmarkResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"BookmarksApi.get_bookmark",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookmarksApi#get_bookmark\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getBookmarks
    # Retrieves all stored bookmarks a user can read.
    # @param bookmark_type [String] Specifies the bookmark type
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :o_data_only Filter for OData bookmarks
    # @option opts [String] :group_key A key used to separate bookmarks within the same query type
    # @return [BookmarkListResponse]
    def get_bookmarks(bookmark_type, opts = {})
      data, _status_code, _headers = get_bookmarks_with_http_info(bookmark_type, opts)
      data
    end

    # getBookmarks
    # Retrieves all stored bookmarks a user can read.
    # @param bookmark_type [String] Specifies the bookmark type
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :o_data_only Filter for OData bookmarks
    # @option opts [String] :group_key A key used to separate bookmarks within the same query type
    # @return [Array<(BookmarkListResponse, Integer, Hash)>] BookmarkListResponse data, response status code and response headers
    def get_bookmarks_with_http_info(bookmark_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BookmarksApi.get_bookmarks ...'
      end
      # verify the required parameter 'bookmark_type' is set
      if @api_client.config.client_side_validation && bookmark_type.nil?
        fail ArgumentError, "Missing the required parameter 'bookmark_type' when calling BookmarksApi.get_bookmarks"
      end
      # verify enum value
      allowable_values = ["INVENTORY", "REPORTING", "VISUALIZER", "DASHBOARD", "INVENTORY_EXPORT"]
      if @api_client.config.client_side_validation && !allowable_values.include?(bookmark_type)
        fail ArgumentError, "invalid value for \"bookmark_type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/bookmarks'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'bookmarkType'] = bookmark_type
      query_params[:'oDataOnly'] = opts[:'o_data_only'] if !opts[:'o_data_only'].nil?
      query_params[:'groupKey'] = opts[:'group_key'] if !opts[:'group_key'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BookmarkListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"BookmarksApi.get_bookmarks",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookmarksApi#get_bookmarks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # updateBookmark
    # Updates a bookmark stored in the database
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Bookmark] :body bookmark
    # @return [BookmarkResponse]
    def update_bookmark(id, opts = {})
      data, _status_code, _headers = update_bookmark_with_http_info(id, opts)
      data
    end

    # updateBookmark
    # Updates a bookmark stored in the database
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Bookmark] :body bookmark
    # @return [Array<(BookmarkResponse, Integer, Hash)>] BookmarkResponse data, response status code and response headers
    def update_bookmark_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BookmarksApi.update_bookmark ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BookmarksApi.update_bookmark"
      end
      # resource path
      local_var_path = '/bookmarks/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'BookmarkResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"BookmarksApi.update_bookmark",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookmarksApi#update_bookmark\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # updateWorkingCopy
    # Updates a working copy for a bookmark stored in the database
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [BookmarkWorkingCopy] :body workingCopy
    # @return [BookmarkResponse]
    def update_working_copy(id, opts = {})
      data, _status_code, _headers = update_working_copy_with_http_info(id, opts)
      data
    end

    # updateWorkingCopy
    # Updates a working copy for a bookmark stored in the database
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [BookmarkWorkingCopy] :body workingCopy
    # @return [Array<(BookmarkResponse, Integer, Hash)>] BookmarkResponse data, response status code and response headers
    def update_working_copy_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BookmarksApi.update_working_copy ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BookmarksApi.update_working_copy"
      end
      # resource path
      local_var_path = '/bookmarks/{id}/workingCopy'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'BookmarkResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"BookmarksApi.update_working_copy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookmarksApi#update_working_copy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

=begin
#Pathfinder

#Core application for storage and analysis of IT landscape data

The version of the OpenAPI document: 5.0.1100

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.2.0

=end

require 'cgi'

module LeanixApi
  class FeaturesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # getFeature
    # Retrieves a feature for a workspace
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [FeatureResponse]
    def get_feature(id, opts = {})
      data, _status_code, _headers = get_feature_with_http_info(id, opts)
      data
    end

    # getFeature
    # Retrieves a feature for a workspace
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FeatureResponse, Integer, Hash)>] FeatureResponse data, response status code and response headers
    def get_feature_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeaturesApi.get_feature ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling FeaturesApi.get_feature"
      end
      # resource path
      local_var_path = '/features/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FeatureResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"FeaturesApi.get_feature",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeaturesApi#get_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getFeatures
    # Retrieves features for current workspace
    # @param [Hash] opts the optional parameters
    # @return [FeatureListResponse]
    def get_features(opts = {})
      data, _status_code, _headers = get_features_with_http_info(opts)
      data
    end

    # getFeatures
    # Retrieves features for current workspace
    # @param [Hash] opts the optional parameters
    # @return [Array<(FeatureListResponse, Integer, Hash)>] FeatureListResponse data, response status code and response headers
    def get_features_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeaturesApi.get_features ...'
      end
      # resource path
      local_var_path = '/features'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FeatureListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"FeaturesApi.get_features",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeaturesApi#get_features\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # updateFeature
    # Change properties of a feature for a workspace (ADMIN role only)
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :enabled 
    # @return [FeatureResponse]
    def upsert_feature(id, opts = {})
      data, _status_code, _headers = upsert_feature_with_http_info(id, opts)
      data
    end

    # updateFeature
    # Change properties of a feature for a workspace (ADMIN role only)
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :enabled 
    # @return [Array<(FeatureResponse, Integer, Hash)>] FeatureResponse data, response status code and response headers
    def upsert_feature_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeaturesApi.upsert_feature ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling FeaturesApi.upsert_feature"
      end
      # resource path
      local_var_path = '/features/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'enabled'] = opts[:'enabled'] if !opts[:'enabled'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FeatureResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"FeaturesApi.upsert_feature",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeaturesApi#upsert_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

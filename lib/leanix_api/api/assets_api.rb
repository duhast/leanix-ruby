=begin
#Pathfinder

#Core application for storage and analysis of IT landscape data

The version of the OpenAPI document: 5.0.1100

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.2.0

=end

require 'cgi'

module LeanixApi
  class AssetsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # deleteAsset
    # Delete an asset
    # @param asset [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_asset(asset, opts = {})
      delete_asset_with_http_info(asset, opts)
      nil
    end

    # deleteAsset
    # Delete an asset
    # @param asset [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_asset_with_http_info(asset, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetsApi.delete_asset ...'
      end
      # verify the required parameter 'asset' is set
      if @api_client.config.client_side_validation && asset.nil?
        fail ArgumentError, "Missing the required parameter 'asset' when calling AssetsApi.delete_asset"
      end
      # verify enum value
      allowable_values = ["LOGO_EXPORT", "FAVICON", "LOGO_MENU", "MENU_BACKGROUND"]
      if @api_client.config.client_side_validation && !allowable_values.include?(asset)
        fail ArgumentError, "invalid value for \"asset\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/assets/{asset}'.sub('{' + 'asset' + '}', CGI.escape(asset.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"AssetsApi.delete_asset",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetsApi#delete_asset\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # downloadAsset
    # Download an asset
    # @param asset [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def download_asset(asset, opts = {})
      download_asset_with_http_info(asset, opts)
      nil
    end

    # downloadAsset
    # Download an asset
    # @param asset [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def download_asset_with_http_info(asset, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetsApi.download_asset ...'
      end
      # verify the required parameter 'asset' is set
      if @api_client.config.client_side_validation && asset.nil?
        fail ArgumentError, "Missing the required parameter 'asset' when calling AssetsApi.download_asset"
      end
      # verify enum value
      allowable_values = ["LOGO_EXPORT", "FAVICON", "LOGO_MENU", "MENU_BACKGROUND"]
      if @api_client.config.client_side_validation && !allowable_values.include?(asset)
        fail ArgumentError, "invalid value for \"asset\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/assets/{asset}'.sub('{' + 'asset' + '}', CGI.escape(asset.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"AssetsApi.download_asset",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetsApi#download_asset\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # upsertAsset
    # Upsert an asset
    # @param asset [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def upsert_asset(asset, opts = {})
      upsert_asset_with_http_info(asset, opts)
      nil
    end

    # upsertAsset
    # Upsert an asset
    # @param asset [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def upsert_asset_with_http_info(asset, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetsApi.upsert_asset ...'
      end
      # verify the required parameter 'asset' is set
      if @api_client.config.client_side_validation && asset.nil?
        fail ArgumentError, "Missing the required parameter 'asset' when calling AssetsApi.upsert_asset"
      end
      # verify enum value
      allowable_values = ["LOGO_EXPORT", "FAVICON", "LOGO_MENU", "MENU_BACKGROUND"]
      if @api_client.config.client_side_validation && !allowable_values.include?(asset)
        fail ArgumentError, "invalid value for \"asset\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/assets/{asset}'.sub('{' + 'asset' + '}', CGI.escape(asset.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"AssetsApi.upsert_asset",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetsApi#upsert_asset\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

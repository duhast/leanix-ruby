=begin
#Pathfinder

#Core application for storage and analysis of IT landscape data

The version of the OpenAPI document: 5.0.1100

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.2.0

=end

require 'cgi'

module LeanixApi
  class ModelsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # createAccessControlEntity
    # Creates an access control entity
    # @param [Hash] opts the optional parameters
    # @option opts [AccessControlEntity] :body New access control entity
    # @return [AccessControlEntityResponse]
    def create_access_control_entity(opts = {})
      data, _status_code, _headers = create_access_control_entity_with_http_info(opts)
      data
    end

    # createAccessControlEntity
    # Creates an access control entity
    # @param [Hash] opts the optional parameters
    # @option opts [AccessControlEntity] :body New access control entity
    # @return [Array<(AccessControlEntityResponse, Integer, Hash)>] AccessControlEntityResponse data, response status code and response headers
    def create_access_control_entity_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModelsApi.create_access_control_entity ...'
      end
      # resource path
      local_var_path = '/models/accessControlEntities'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'AccessControlEntityResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"ModelsApi.create_access_control_entity",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModelsApi#create_access_control_entity\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # deleteAccessControlEntity
    # Deletes an access control entity
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_access_control_entity(id, opts = {})
      delete_access_control_entity_with_http_info(id, opts)
      nil
    end

    # deleteAccessControlEntity
    # Deletes an access control entity
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_access_control_entity_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModelsApi.delete_access_control_entity ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ModelsApi.delete_access_control_entity"
      end
      # resource path
      local_var_path = '/models/accessControlEntities/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"ModelsApi.delete_access_control_entity",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModelsApi#delete_access_control_entity\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getAccessControlEntities
    # Retrieves all access control entities
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Number of reports to be returned, maximum is 100 (default to 40)
    # @option opts [String] :cursor Marks the position of the first element that should be returned
    # @option opts [String] :sorting The field to sort the results by (default to 'name')
    # @option opts [String] :sort_direction The direction of the sorting (default to 'ASC')
    # @return [AccessControlEntityListResponse]
    def get_access_control_entities(opts = {})
      data, _status_code, _headers = get_access_control_entities_with_http_info(opts)
      data
    end

    # getAccessControlEntities
    # Retrieves all access control entities
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Number of reports to be returned, maximum is 100 (default to 40)
    # @option opts [String] :cursor Marks the position of the first element that should be returned
    # @option opts [String] :sorting The field to sort the results by (default to 'name')
    # @option opts [String] :sort_direction The direction of the sorting (default to 'ASC')
    # @return [Array<(AccessControlEntityListResponse, Integer, Hash)>] AccessControlEntityListResponse data, response status code and response headers
    def get_access_control_entities_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModelsApi.get_access_control_entities ...'
      end
      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && opts[:'sort_direction'] && !allowable_values.include?(opts[:'sort_direction'])
        fail ArgumentError, "invalid value for \"sort_direction\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/models/accessControlEntities'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'sorting'] = opts[:'sorting'] if !opts[:'sorting'].nil?
      query_params[:'sortDirection'] = opts[:'sort_direction'] if !opts[:'sort_direction'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AccessControlEntityListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"ModelsApi.get_access_control_entities",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModelsApi#get_access_control_entities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getMetaModelActionBatch
    # Return a single action batch
    # @param id [String] Id of the requested actionBatch
    # @param [Hash] opts the optional parameters
    # @return [MetaModelActionBatchResponse]
    def get_action_batch(id, opts = {})
      data, _status_code, _headers = get_action_batch_with_http_info(id, opts)
      data
    end

    # getMetaModelActionBatch
    # Return a single action batch
    # @param id [String] Id of the requested actionBatch
    # @param [Hash] opts the optional parameters
    # @return [Array<(MetaModelActionBatchResponse, Integer, Hash)>] MetaModelActionBatchResponse data, response status code and response headers
    def get_action_batch_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModelsApi.get_action_batch ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ModelsApi.get_action_batch"
      end
      # resource path
      local_var_path = '/models/metaModel/actionBatches/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MetaModelActionBatchResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"ModelsApi.get_action_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModelsApi#get_action_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getMetaModelActionBatches
    # Return existing action batches
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page number to access (1 indexed, defaults to 1) (default to 1)
    # @option opts [Integer] :size The page size requested (defaults to 20, max 100) (default to 20)
    # @return [MetaModelActionBatchListResponse]
    def get_action_batches(opts = {})
      data, _status_code, _headers = get_action_batches_with_http_info(opts)
      data
    end

    # getMetaModelActionBatches
    # Return existing action batches
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page number to access (1 indexed, defaults to 1) (default to 1)
    # @option opts [Integer] :size The page size requested (defaults to 20, max 100) (default to 20)
    # @return [Array<(MetaModelActionBatchListResponse, Integer, Hash)>] MetaModelActionBatchListResponse data, response status code and response headers
    def get_action_batches_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModelsApi.get_action_batches ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling ModelsApi.get_action_batches, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] > 100
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling ModelsApi.get_action_batches, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling ModelsApi.get_action_batches, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/models/metaModel/actionBatches'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MetaModelActionBatchListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"ModelsApi.get_action_batches",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModelsApi#get_action_batches\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getAuthorization
    # Provides all authorization roles were for each role a set of permission is defined.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :workspace_id 
    # @return [AuthorizationRolesResponse]
    def get_authorization(opts = {})
      data, _status_code, _headers = get_authorization_with_http_info(opts)
      data
    end

    # getAuthorization
    # Provides all authorization roles were for each role a set of permission is defined.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :workspace_id 
    # @return [Array<(AuthorizationRolesResponse, Integer, Hash)>] AuthorizationRolesResponse data, response status code and response headers
    def get_authorization_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModelsApi.get_authorization ...'
      end
      # resource path
      local_var_path = '/models/authorization'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'workspaceId'] = opts[:'workspace_id'] if !opts[:'workspace_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AuthorizationRolesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"ModelsApi.get_authorization",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModelsApi#get_authorization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getDataModel
    # Retrieves the model for a workspace
    # @param [Hash] opts the optional parameters
    # @option opts [String] :workspace_id 
    # @return [DataModelDefinitionResponse]
    def get_data_model(opts = {})
      data, _status_code, _headers = get_data_model_with_http_info(opts)
      data
    end

    # getDataModel
    # Retrieves the model for a workspace
    # @param [Hash] opts the optional parameters
    # @option opts [String] :workspace_id 
    # @return [Array<(DataModelDefinitionResponse, Integer, Hash)>] DataModelDefinitionResponse data, response status code and response headers
    def get_data_model_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModelsApi.get_data_model ...'
      end
      # resource path
      local_var_path = '/models/dataModel'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'workspaceId'] = opts[:'workspace_id'] if !opts[:'workspace_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DataModelDefinitionResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"ModelsApi.get_data_model",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModelsApi#get_data_model\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getEnrichedDataModel
    # Retrieves the model for a workspace, including redundant data that makes life easy for the web front end
    # @param [Hash] opts the optional parameters
    # @option opts [String] :workspace_id 
    # @return [DataModelDefinitionResponse]
    def get_enriched_data_model(opts = {})
      data, _status_code, _headers = get_enriched_data_model_with_http_info(opts)
      data
    end

    # getEnrichedDataModel
    # Retrieves the model for a workspace, including redundant data that makes life easy for the web front end
    # @param [Hash] opts the optional parameters
    # @option opts [String] :workspace_id 
    # @return [Array<(DataModelDefinitionResponse, Integer, Hash)>] DataModelDefinitionResponse data, response status code and response headers
    def get_enriched_data_model_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModelsApi.get_enriched_data_model ...'
      end
      # resource path
      local_var_path = '/models/dataModel/enriched'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'workspaceId'] = opts[:'workspace_id'] if !opts[:'workspace_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DataModelDefinitionResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"ModelsApi.get_enriched_data_model",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModelsApi#get_enriched_data_model\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getFactSheetResourceModel
    # Retrieves the fact sheet resource model for a workspace
    # @param [Hash] opts the optional parameters
    # @option opts [String] :workspace_id 
    # @return [FactSheetResourceModelResponse]
    def get_fact_sheet_resource_model(opts = {})
      data, _status_code, _headers = get_fact_sheet_resource_model_with_http_info(opts)
      data
    end

    # getFactSheetResourceModel
    # Retrieves the fact sheet resource model for a workspace
    # @param [Hash] opts the optional parameters
    # @option opts [String] :workspace_id 
    # @return [Array<(FactSheetResourceModelResponse, Integer, Hash)>] FactSheetResourceModelResponse data, response status code and response headers
    def get_fact_sheet_resource_model_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModelsApi.get_fact_sheet_resource_model ...'
      end
      # resource path
      local_var_path = '/models/factSheetResources'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'workspaceId'] = opts[:'workspace_id'] if !opts[:'workspace_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FactSheetResourceModelResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"ModelsApi.get_fact_sheet_resource_model",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModelsApi#get_fact_sheet_resource_model\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getLanguage
    # Get the given language
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :workspace_id 
    # @return [LanguageResponse]
    def get_language(id, opts = {})
      data, _status_code, _headers = get_language_with_http_info(id, opts)
      data
    end

    # getLanguage
    # Get the given language
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :workspace_id 
    # @return [Array<(LanguageResponse, Integer, Hash)>] LanguageResponse data, response status code and response headers
    def get_language_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModelsApi.get_language ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ModelsApi.get_language"
      end
      # resource path
      local_var_path = '/models/languages/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'workspaceId'] = opts[:'workspace_id'] if !opts[:'workspace_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'LanguageResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"ModelsApi.get_language",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModelsApi#get_language\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getMetaModel
    # DEPRECATED: This endpoint provides an aggregated version of some of the other models available under /models. The MetaModel is only intended for internal use and will soon be removed from the public OpenAPI spec.
    # @param [Hash] opts the optional parameters
    # @return [MetaModelResponse]
    def get_meta_model(opts = {})
      data, _status_code, _headers = get_meta_model_with_http_info(opts)
      data
    end

    # getMetaModel
    # DEPRECATED: This endpoint provides an aggregated version of some of the other models available under /models. The MetaModel is only intended for internal use and will soon be removed from the public OpenAPI spec.
    # @param [Hash] opts the optional parameters
    # @return [Array<(MetaModelResponse, Integer, Hash)>] MetaModelResponse data, response status code and response headers
    def get_meta_model_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModelsApi.get_meta_model ...'
      end
      # resource path
      local_var_path = '/models/metaModel'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MetaModelResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"ModelsApi.get_meta_model",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModelsApi#get_meta_model\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getMetaModelForFactSheetType
    # DEPRECATED: This endpoint provides an aggregated version of some of the other models available under /models. The MetaModel is only intended for internal use and will soon be removed from the public OpenAPI spec.
    # @param fact_sheet_type [String] 
    # @param [Hash] opts the optional parameters
    # @return [MetaModelResponse]
    def get_meta_model_for_type(fact_sheet_type, opts = {})
      data, _status_code, _headers = get_meta_model_for_type_with_http_info(fact_sheet_type, opts)
      data
    end

    # getMetaModelForFactSheetType
    # DEPRECATED: This endpoint provides an aggregated version of some of the other models available under /models. The MetaModel is only intended for internal use and will soon be removed from the public OpenAPI spec.
    # @param fact_sheet_type [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MetaModelResponse, Integer, Hash)>] MetaModelResponse data, response status code and response headers
    def get_meta_model_for_type_with_http_info(fact_sheet_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModelsApi.get_meta_model_for_type ...'
      end
      # verify the required parameter 'fact_sheet_type' is set
      if @api_client.config.client_side_validation && fact_sheet_type.nil?
        fail ArgumentError, "Missing the required parameter 'fact_sheet_type' when calling ModelsApi.get_meta_model_for_type"
      end
      # resource path
      local_var_path = '/models/metaModel/{factSheetType}'.sub('{' + 'factSheetType' + '}', CGI.escape(fact_sheet_type.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MetaModelResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"ModelsApi.get_meta_model_for_type",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModelsApi#get_meta_model_for_type\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getPreviewOfAffectedData
    # Provides a preview for affected data that will be deleted if corresponding FactSheet Type will be deleted.
    # @param fact_sheet_type [String] 
    # @param [Hash] opts the optional parameters
    # @return [FSTypeDeletionPreviewResponse]
    def get_preview_of_affected_data(fact_sheet_type, opts = {})
      data, _status_code, _headers = get_preview_of_affected_data_with_http_info(fact_sheet_type, opts)
      data
    end

    # getPreviewOfAffectedData
    # Provides a preview for affected data that will be deleted if corresponding FactSheet Type will be deleted.
    # @param fact_sheet_type [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FSTypeDeletionPreviewResponse, Integer, Hash)>] FSTypeDeletionPreviewResponse data, response status code and response headers
    def get_preview_of_affected_data_with_http_info(fact_sheet_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModelsApi.get_preview_of_affected_data ...'
      end
      # verify the required parameter 'fact_sheet_type' is set
      if @api_client.config.client_side_validation && fact_sheet_type.nil?
        fail ArgumentError, "Missing the required parameter 'fact_sheet_type' when calling ModelsApi.get_preview_of_affected_data"
      end
      # resource path
      local_var_path = '/models/metaModel/{factSheetType}/deletionPreview'.sub('{' + 'factSheetType' + '}', CGI.escape(fact_sheet_type.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FSTypeDeletionPreviewResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"ModelsApi.get_preview_of_affected_data",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModelsApi#get_preview_of_affected_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getReportingModel
    # Retrieves the report model for a workspace
    # @param [Hash] opts the optional parameters
    # @option opts [String] :workspace_id 
    # @return [ReportingModelResponse]
    def get_reporting_model(opts = {})
      data, _status_code, _headers = get_reporting_model_with_http_info(opts)
      data
    end

    # getReportingModel
    # Retrieves the report model for a workspace
    # @param [Hash] opts the optional parameters
    # @option opts [String] :workspace_id 
    # @return [Array<(ReportingModelResponse, Integer, Hash)>] ReportingModelResponse data, response status code and response headers
    def get_reporting_model_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModelsApi.get_reporting_model ...'
      end
      # resource path
      local_var_path = '/models/reportingModel'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'workspaceId'] = opts[:'workspace_id'] if !opts[:'workspace_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ReportingModelResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"ModelsApi.get_reporting_model",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModelsApi#get_reporting_model\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getViewModel
    # Retrieves the view model for a workspace
    # @param [Hash] opts the optional parameters
    # @option opts [String] :workspace_id 
    # @return [ViewModelResponse]
    def get_view_model(opts = {})
      data, _status_code, _headers = get_view_model_with_http_info(opts)
      data
    end

    # getViewModel
    # Retrieves the view model for a workspace
    # @param [Hash] opts the optional parameters
    # @option opts [String] :workspace_id 
    # @return [Array<(ViewModelResponse, Integer, Hash)>] ViewModelResponse data, response status code and response headers
    def get_view_model_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModelsApi.get_view_model ...'
      end
      # resource path
      local_var_path = '/models/viewModel'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'workspaceId'] = opts[:'workspace_id'] if !opts[:'workspace_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ViewModelResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"ModelsApi.get_view_model",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModelsApi#get_view_model\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # postMetaModelActionBatches
    # DEPRECATED: This endpoint provides an aggregated version of some of the other models available under /models. The MetaModel is only intended for internal use and will soon be removed from the public OpenAPI spec.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<ActionBatchItem>] :body List of actions to be processed
    # @return [MetaModelActionBatchResponse]
    def post_action_batches(opts = {})
      data, _status_code, _headers = post_action_batches_with_http_info(opts)
      data
    end

    # postMetaModelActionBatches
    # DEPRECATED: This endpoint provides an aggregated version of some of the other models available under /models. The MetaModel is only intended for internal use and will soon be removed from the public OpenAPI spec.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<ActionBatchItem>] :body List of actions to be processed
    # @return [Array<(MetaModelActionBatchResponse, Integer, Hash)>] MetaModelActionBatchResponse data, response status code and response headers
    def post_action_batches_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModelsApi.post_action_batches ...'
      end
      # resource path
      local_var_path = '/models/metaModel/actionBatches'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'MetaModelActionBatchResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"ModelsApi.post_action_batches",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModelsApi#post_action_batches\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getAccessControlEntity
    # Reads an access control entity
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [AccessControlEntityResponse]
    def read_access_control_entity(id, opts = {})
      data, _status_code, _headers = read_access_control_entity_with_http_info(id, opts)
      data
    end

    # getAccessControlEntity
    # Reads an access control entity
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccessControlEntityResponse, Integer, Hash)>] AccessControlEntityResponse data, response status code and response headers
    def read_access_control_entity_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModelsApi.read_access_control_entity ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ModelsApi.read_access_control_entity"
      end
      # resource path
      local_var_path = '/models/accessControlEntities/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AccessControlEntityResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"ModelsApi.read_access_control_entity",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModelsApi#read_access_control_entity\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # updateAccessControlEntity
    # Updates an access control entity
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [AccessControlEntity] :access_control_entity 
    # @return [AccessControlEntityResponse]
    def update_access_control_entity(id, opts = {})
      data, _status_code, _headers = update_access_control_entity_with_http_info(id, opts)
      data
    end

    # updateAccessControlEntity
    # Updates an access control entity
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [AccessControlEntity] :access_control_entity 
    # @return [Array<(AccessControlEntityResponse, Integer, Hash)>] AccessControlEntityResponse data, response status code and response headers
    def update_access_control_entity_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModelsApi.update_access_control_entity ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ModelsApi.update_access_control_entity"
      end
      # resource path
      local_var_path = '/models/accessControlEntities/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'access_control_entity'])

      # return_type
      return_type = opts[:debug_return_type] || 'AccessControlEntityResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"ModelsApi.update_access_control_entity",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModelsApi#update_access_control_entity\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # updateAuthorization
    # Updates all authorization roles for a given workspace. This means all existing roles and its permissions will be overriden
    # @param body [Array<AuthorizationRole>] The authorization configuration for the workspace which contains all roles and its permissions
    # @param [Hash] opts the optional parameters
    # @option opts [String] :workspace_id 
    # @return [Response]
    def update_authorization(body, opts = {})
      data, _status_code, _headers = update_authorization_with_http_info(body, opts)
      data
    end

    # updateAuthorization
    # Updates all authorization roles for a given workspace. This means all existing roles and its permissions will be overriden
    # @param body [Array<AuthorizationRole>] The authorization configuration for the workspace which contains all roles and its permissions
    # @param [Hash] opts the optional parameters
    # @option opts [String] :workspace_id 
    # @return [Array<(Response, Integer, Hash)>] Response data, response status code and response headers
    def update_authorization_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModelsApi.update_authorization ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ModelsApi.update_authorization"
      end
      # resource path
      local_var_path = '/models/authorization'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'workspaceId'] = opts[:'workspace_id'] if !opts[:'workspace_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"ModelsApi.update_authorization",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModelsApi#update_authorization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # updateDataModel
    # Updates the data model for a workspace
    # @param body [DataModel] the data model for the workspace
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :force whether changes should be forced (default to false)
    # @option opts [String] :workspace_id 
    # @return [DataModelUpdateResponse]
    def update_data_model(body, opts = {})
      data, _status_code, _headers = update_data_model_with_http_info(body, opts)
      data
    end

    # updateDataModel
    # Updates the data model for a workspace
    # @param body [DataModel] the data model for the workspace
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :force whether changes should be forced (default to false)
    # @option opts [String] :workspace_id 
    # @return [Array<(DataModelUpdateResponse, Integer, Hash)>] DataModelUpdateResponse data, response status code and response headers
    def update_data_model_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModelsApi.update_data_model ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ModelsApi.update_data_model"
      end
      # resource path
      local_var_path = '/models/dataModel'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?
      query_params[:'workspaceId'] = opts[:'workspace_id'] if !opts[:'workspace_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DataModelUpdateResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"ModelsApi.update_data_model",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModelsApi#update_data_model\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # updateFactSheetResourceModel
    # Updates the fact sheet resource model for a workspace
    # @param body [FactSheetResourceModelDefinition] the fact sheet resource model for the workspace
    # @param [Hash] opts the optional parameters
    # @option opts [String] :workspace_id 
    # @return [nil]
    def update_fact_sheet_resource_model(body, opts = {})
      update_fact_sheet_resource_model_with_http_info(body, opts)
      nil
    end

    # updateFactSheetResourceModel
    # Updates the fact sheet resource model for a workspace
    # @param body [FactSheetResourceModelDefinition] the fact sheet resource model for the workspace
    # @param [Hash] opts the optional parameters
    # @option opts [String] :workspace_id 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_fact_sheet_resource_model_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModelsApi.update_fact_sheet_resource_model ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ModelsApi.update_fact_sheet_resource_model"
      end
      # resource path
      local_var_path = '/models/factSheetResources'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'workspaceId'] = opts[:'workspace_id'] if !opts[:'workspace_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"ModelsApi.update_fact_sheet_resource_model",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModelsApi#update_fact_sheet_resource_model\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # updateLanguage
    # Updates the given language
    # @param id [String] 
    # @param definition [Translation] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :workspace_id 
    # @return [Response]
    def update_language(id, definition, opts = {})
      data, _status_code, _headers = update_language_with_http_info(id, definition, opts)
      data
    end

    # updateLanguage
    # Updates the given language
    # @param id [String] 
    # @param definition [Translation] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :workspace_id 
    # @return [Array<(Response, Integer, Hash)>] Response data, response status code and response headers
    def update_language_with_http_info(id, definition, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModelsApi.update_language ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ModelsApi.update_language"
      end
      # verify the required parameter 'definition' is set
      if @api_client.config.client_side_validation && definition.nil?
        fail ArgumentError, "Missing the required parameter 'definition' when calling ModelsApi.update_language"
      end
      # resource path
      local_var_path = '/models/languages/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'workspaceId'] = opts[:'workspace_id'] if !opts[:'workspace_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(definition)

      # return_type
      return_type = opts[:debug_return_type] || 'Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"ModelsApi.update_language",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModelsApi#update_language\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # updateReportingModel
    # Updates the report model for a workspace
    # @param body [ReportingModelDefinition] the report model for the workspace
    # @param [Hash] opts the optional parameters
    # @option opts [String] :workspace_id 
    # @return [nil]
    def update_reporting_model(body, opts = {})
      update_reporting_model_with_http_info(body, opts)
      nil
    end

    # updateReportingModel
    # Updates the report model for a workspace
    # @param body [ReportingModelDefinition] the report model for the workspace
    # @param [Hash] opts the optional parameters
    # @option opts [String] :workspace_id 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_reporting_model_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModelsApi.update_reporting_model ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ModelsApi.update_reporting_model"
      end
      # resource path
      local_var_path = '/models/reportingModel'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'workspaceId'] = opts[:'workspace_id'] if !opts[:'workspace_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"ModelsApi.update_reporting_model",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModelsApi#update_reporting_model\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # updateViewModel
    # Updates the view model for a workspace
    # @param body [ViewModelDefinition] the view model for the workspace
    # @param [Hash] opts the optional parameters
    # @option opts [String] :workspace_id 
    # @return [nil]
    def update_view_model(body, opts = {})
      update_view_model_with_http_info(body, opts)
      nil
    end

    # updateViewModel
    # Updates the view model for a workspace
    # @param body [ViewModelDefinition] the view model for the workspace
    # @param [Hash] opts the optional parameters
    # @option opts [String] :workspace_id 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_view_model_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModelsApi.update_view_model ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ModelsApi.update_view_model"
      end
      # resource path
      local_var_path = '/models/viewModel'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'workspaceId'] = opts[:'workspace_id'] if !opts[:'workspace_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"ModelsApi.update_view_model",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModelsApi#update_view_model\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

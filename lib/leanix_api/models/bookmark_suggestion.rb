=begin
#Pathfinder

#Core application for storage and analysis of IT landscape data

The version of the OpenAPI document: 5.0.1100

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.2.0

=end

require 'date'
require 'time'

module LeanixApi
  class BookmarkSuggestion
    attr_accessor :bookmark_id

    attr_accessor :name

    attr_accessor :type

    attr_accessor :subtype

    attr_accessor :description

    attr_accessor :created_at

    attr_accessor :updated_at

    attr_accessor :most_recent_action

    attr_accessor :most_recent_share

    attr_accessor :hit_reason

    attr_accessor :views

    attr_accessor :predefined

    attr_accessor :bookmark_owner

    attr_accessor :can_user_write

    attr_accessor :iso_data_enabled

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'bookmark_id' => :'bookmarkId',
        :'name' => :'name',
        :'type' => :'type',
        :'subtype' => :'subtype',
        :'description' => :'description',
        :'created_at' => :'createdAt',
        :'updated_at' => :'updatedAt',
        :'most_recent_action' => :'mostRecentAction',
        :'most_recent_share' => :'mostRecentShare',
        :'hit_reason' => :'hitReason',
        :'views' => :'views',
        :'predefined' => :'predefined',
        :'bookmark_owner' => :'bookmarkOwner',
        :'can_user_write' => :'canUserWrite',
        :'iso_data_enabled' => :'isoDataEnabled'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'bookmark_id' => :'String',
        :'name' => :'String',
        :'type' => :'String',
        :'subtype' => :'String',
        :'description' => :'String',
        :'created_at' => :'Time',
        :'updated_at' => :'Time',
        :'most_recent_action' => :'MostRecentAction',
        :'most_recent_share' => :'MostRecentShare',
        :'hit_reason' => :'Reason',
        :'views' => :'Integer',
        :'predefined' => :'Boolean',
        :'bookmark_owner' => :'User',
        :'can_user_write' => :'Boolean',
        :'iso_data_enabled' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `LeanixApi::BookmarkSuggestion` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `LeanixApi::BookmarkSuggestion`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'bookmark_id')
        self.bookmark_id = attributes[:'bookmark_id']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'subtype')
        self.subtype = attributes[:'subtype']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end

      if attributes.key?(:'most_recent_action')
        self.most_recent_action = attributes[:'most_recent_action']
      end

      if attributes.key?(:'most_recent_share')
        self.most_recent_share = attributes[:'most_recent_share']
      end

      if attributes.key?(:'hit_reason')
        self.hit_reason = attributes[:'hit_reason']
      end

      if attributes.key?(:'views')
        self.views = attributes[:'views']
      end

      if attributes.key?(:'predefined')
        self.predefined = attributes[:'predefined']
      else
        self.predefined = false
      end

      if attributes.key?(:'bookmark_owner')
        self.bookmark_owner = attributes[:'bookmark_owner']
      end

      if attributes.key?(:'can_user_write')
        self.can_user_write = attributes[:'can_user_write']
      else
        self.can_user_write = false
      end

      if attributes.key?(:'iso_data_enabled')
        self.iso_data_enabled = attributes[:'iso_data_enabled']
      else
        self.iso_data_enabled = false
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      type_validator = EnumAttributeValidator.new('String', ["INVENTORY", "REPORTING", "VISUALIZER", "DASHBOARD", "INVENTORY_EXPORT"])
      return false unless type_validator.valid?(@type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      validator = EnumAttributeValidator.new('String', ["INVENTORY", "REPORTING", "VISUALIZER", "DASHBOARD", "INVENTORY_EXPORT"])
      unless validator.valid?(type)
        fail ArgumentError, "invalid value for \"type\", must be one of #{validator.allowable_values}."
      end
      @type = type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          bookmark_id == o.bookmark_id &&
          name == o.name &&
          type == o.type &&
          subtype == o.subtype &&
          description == o.description &&
          created_at == o.created_at &&
          updated_at == o.updated_at &&
          most_recent_action == o.most_recent_action &&
          most_recent_share == o.most_recent_share &&
          hit_reason == o.hit_reason &&
          views == o.views &&
          predefined == o.predefined &&
          bookmark_owner == o.bookmark_owner &&
          can_user_write == o.can_user_write &&
          iso_data_enabled == o.iso_data_enabled
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [bookmark_id, name, type, subtype, description, created_at, updated_at, most_recent_action, most_recent_share, hit_reason, views, predefined, bookmark_owner, can_user_write, iso_data_enabled].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = LeanixApi.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end

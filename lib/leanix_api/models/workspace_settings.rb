=begin
#Pathfinder

#Core application for storage and analysis of IT landscape data

The version of the OpenAPI document: 5.0.1100

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.2.0

=end

require 'date'
require 'time'

module LeanixApi
  class WorkspaceSettings
    attr_accessor :subscriptions

    attr_accessor :tags

    attr_accessor :help

    attr_accessor :snapshot

    attr_accessor :integrations

    attr_accessor :currency

    attr_accessor :language

    attr_accessor :js_snippet

    attr_accessor :idle_timeout_minutes

    attr_accessor :default_report_id

    attr_accessor :data_privacy

    attr_accessor :completion_score

    attr_accessor :quick_search_mode

    attr_accessor :design

    attr_accessor :metrics

    attr_accessor :ootb_dashboards

    attr_accessor :smart_indicators_enabled

    attr_accessor :dashboards

    attr_accessor :retention

    attr_accessor :dashboard

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'subscriptions' => :'subscriptions',
        :'tags' => :'tags',
        :'help' => :'help',
        :'snapshot' => :'snapshot',
        :'integrations' => :'integrations',
        :'currency' => :'currency',
        :'language' => :'language',
        :'js_snippet' => :'jsSnippet',
        :'idle_timeout_minutes' => :'idleTimeoutMinutes',
        :'default_report_id' => :'defaultReportId',
        :'data_privacy' => :'dataPrivacy',
        :'completion_score' => :'completionScore',
        :'quick_search_mode' => :'quickSearchMode',
        :'design' => :'design',
        :'metrics' => :'metrics',
        :'ootb_dashboards' => :'ootbDashboards',
        :'smart_indicators_enabled' => :'smartIndicatorsEnabled',
        :'dashboards' => :'dashboards',
        :'retention' => :'retention',
        :'dashboard' => :'dashboard'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'subscriptions' => :'SubscriptionSettings',
        :'tags' => :'TagSettings',
        :'help' => :'HelpSettings',
        :'snapshot' => :'SnapshotSettings',
        :'integrations' => :'IntegrationsSettings',
        :'currency' => :'String',
        :'language' => :'String',
        :'js_snippet' => :'String',
        :'idle_timeout_minutes' => :'Integer',
        :'default_report_id' => :'String',
        :'data_privacy' => :'String',
        :'completion_score' => :'String',
        :'quick_search_mode' => :'String',
        :'design' => :'Design',
        :'metrics' => :'Metrics',
        :'ootb_dashboards' => :'OotbDashboardSettings',
        :'smart_indicators_enabled' => :'Boolean',
        :'dashboards' => :'Array<Dashboard>',
        :'retention' => :'RetentionSettings',
        :'dashboard' => :'DashboardSettings'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `LeanixApi::WorkspaceSettings` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `LeanixApi::WorkspaceSettings`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'subscriptions')
        self.subscriptions = attributes[:'subscriptions']
      else
        self.subscriptions = nil
      end

      if attributes.key?(:'tags')
        self.tags = attributes[:'tags']
      else
        self.tags = nil
      end

      if attributes.key?(:'help')
        self.help = attributes[:'help']
      else
        self.help = nil
      end

      if attributes.key?(:'snapshot')
        self.snapshot = attributes[:'snapshot']
      else
        self.snapshot = nil
      end

      if attributes.key?(:'integrations')
        self.integrations = attributes[:'integrations']
      end

      if attributes.key?(:'currency')
        self.currency = attributes[:'currency']
      end

      if attributes.key?(:'language')
        self.language = attributes[:'language']
      end

      if attributes.key?(:'js_snippet')
        self.js_snippet = attributes[:'js_snippet']
      end

      if attributes.key?(:'idle_timeout_minutes')
        self.idle_timeout_minutes = attributes[:'idle_timeout_minutes']
      else
        self.idle_timeout_minutes = nil
      end

      if attributes.key?(:'default_report_id')
        self.default_report_id = attributes[:'default_report_id']
      end

      if attributes.key?(:'data_privacy')
        self.data_privacy = attributes[:'data_privacy']
      else
        self.data_privacy = nil
      end

      if attributes.key?(:'completion_score')
        self.completion_score = attributes[:'completion_score']
      else
        self.completion_score = nil
      end

      if attributes.key?(:'quick_search_mode')
        self.quick_search_mode = attributes[:'quick_search_mode']
      else
        self.quick_search_mode = nil
      end

      if attributes.key?(:'design')
        self.design = attributes[:'design']
      else
        self.design = nil
      end

      if attributes.key?(:'metrics')
        self.metrics = attributes[:'metrics']
      end

      if attributes.key?(:'ootb_dashboards')
        self.ootb_dashboards = attributes[:'ootb_dashboards']
      end

      if attributes.key?(:'smart_indicators_enabled')
        self.smart_indicators_enabled = attributes[:'smart_indicators_enabled']
      else
        self.smart_indicators_enabled = false
      end

      if attributes.key?(:'dashboards')
        if (value = attributes[:'dashboards']).is_a?(Array)
          self.dashboards = value
        end
      end

      if attributes.key?(:'retention')
        self.retention = attributes[:'retention']
      end

      if attributes.key?(:'dashboard')
        self.dashboard = attributes[:'dashboard']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @subscriptions.nil?
        invalid_properties.push('invalid value for "subscriptions", subscriptions cannot be nil.')
      end

      if @tags.nil?
        invalid_properties.push('invalid value for "tags", tags cannot be nil.')
      end

      if @help.nil?
        invalid_properties.push('invalid value for "help", help cannot be nil.')
      end

      if @snapshot.nil?
        invalid_properties.push('invalid value for "snapshot", snapshot cannot be nil.')
      end

      if @idle_timeout_minutes.nil?
        invalid_properties.push('invalid value for "idle_timeout_minutes", idle_timeout_minutes cannot be nil.')
      end

      if @idle_timeout_minutes < 1
        invalid_properties.push('invalid value for "idle_timeout_minutes", must be greater than or equal to 1.')
      end

      if @data_privacy.nil?
        invalid_properties.push('invalid value for "data_privacy", data_privacy cannot be nil.')
      end

      if @completion_score.nil?
        invalid_properties.push('invalid value for "completion_score", completion_score cannot be nil.')
      end

      if @quick_search_mode.nil?
        invalid_properties.push('invalid value for "quick_search_mode", quick_search_mode cannot be nil.')
      end

      if @design.nil?
        invalid_properties.push('invalid value for "design", design cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @subscriptions.nil?
      return false if @tags.nil?
      return false if @help.nil?
      return false if @snapshot.nil?
      return false if @idle_timeout_minutes.nil?
      return false if @idle_timeout_minutes < 1
      return false if @data_privacy.nil?
      data_privacy_validator = EnumAttributeValidator.new('String', ["NORMAL", "RELAXED"])
      return false unless data_privacy_validator.valid?(@data_privacy)
      return false if @completion_score.nil?
      completion_score_validator = EnumAttributeValidator.new('String', ["ENABLED", "DISABLED"])
      return false unless completion_score_validator.valid?(@completion_score)
      return false if @quick_search_mode.nil?
      quick_search_mode_validator = EnumAttributeValidator.new('String', ["LIST_VIEW", "GROUPED_VIEW"])
      return false unless quick_search_mode_validator.valid?(@quick_search_mode)
      return false if @design.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] idle_timeout_minutes Value to be assigned
    def idle_timeout_minutes=(idle_timeout_minutes)
      if idle_timeout_minutes.nil?
        fail ArgumentError, 'idle_timeout_minutes cannot be nil'
      end

      if idle_timeout_minutes < 1
        fail ArgumentError, 'invalid value for "idle_timeout_minutes", must be greater than or equal to 1.'
      end

      @idle_timeout_minutes = idle_timeout_minutes
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] data_privacy Object to be assigned
    def data_privacy=(data_privacy)
      validator = EnumAttributeValidator.new('String', ["NORMAL", "RELAXED"])
      unless validator.valid?(data_privacy)
        fail ArgumentError, "invalid value for \"data_privacy\", must be one of #{validator.allowable_values}."
      end
      @data_privacy = data_privacy
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] completion_score Object to be assigned
    def completion_score=(completion_score)
      validator = EnumAttributeValidator.new('String', ["ENABLED", "DISABLED"])
      unless validator.valid?(completion_score)
        fail ArgumentError, "invalid value for \"completion_score\", must be one of #{validator.allowable_values}."
      end
      @completion_score = completion_score
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] quick_search_mode Object to be assigned
    def quick_search_mode=(quick_search_mode)
      validator = EnumAttributeValidator.new('String', ["LIST_VIEW", "GROUPED_VIEW"])
      unless validator.valid?(quick_search_mode)
        fail ArgumentError, "invalid value for \"quick_search_mode\", must be one of #{validator.allowable_values}."
      end
      @quick_search_mode = quick_search_mode
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          subscriptions == o.subscriptions &&
          tags == o.tags &&
          help == o.help &&
          snapshot == o.snapshot &&
          integrations == o.integrations &&
          currency == o.currency &&
          language == o.language &&
          js_snippet == o.js_snippet &&
          idle_timeout_minutes == o.idle_timeout_minutes &&
          default_report_id == o.default_report_id &&
          data_privacy == o.data_privacy &&
          completion_score == o.completion_score &&
          quick_search_mode == o.quick_search_mode &&
          design == o.design &&
          metrics == o.metrics &&
          ootb_dashboards == o.ootb_dashboards &&
          smart_indicators_enabled == o.smart_indicators_enabled &&
          dashboards == o.dashboards &&
          retention == o.retention &&
          dashboard == o.dashboard
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [subscriptions, tags, help, snapshot, integrations, currency, language, js_snippet, idle_timeout_minutes, default_report_id, data_privacy, completion_score, quick_search_mode, design, metrics, ootb_dashboards, smart_indicators_enabled, dashboards, retention, dashboard].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = LeanixApi.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end

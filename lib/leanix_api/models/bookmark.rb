=begin
#Pathfinder

#Core application for storage and analysis of IT landscape data

The version of the OpenAPI document: 5.0.1100

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.2.0

=end

require 'date'
require 'time'

module LeanixApi
  class Bookmark
    attr_accessor :id

    attr_accessor :user_id

    attr_accessor :name

    attr_accessor :type

    attr_accessor :group_key

    attr_accessor :state

    attr_accessor :working_copy

    attr_accessor :description

    attr_accessor :created_at

    attr_accessor :updated_at

    attr_accessor :i18n_key

    attr_accessor :predefined

    attr_accessor :readonly

    attr_accessor :default_sharing_priority

    attr_accessor :user

    attr_accessor :permitted_read_user_ids

    attr_accessor :permitted_write_user_ids

    attr_accessor :referenced_fact_sheet_ids

    attr_accessor :views

    attr_accessor :replay_sequence

    attr_accessor :temporary

    attr_accessor :o_data_enabled

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'user_id' => :'userId',
        :'name' => :'name',
        :'type' => :'type',
        :'group_key' => :'groupKey',
        :'state' => :'state',
        :'working_copy' => :'workingCopy',
        :'description' => :'description',
        :'created_at' => :'createdAt',
        :'updated_at' => :'updatedAt',
        :'i18n_key' => :'i18nKey',
        :'predefined' => :'predefined',
        :'readonly' => :'readonly',
        :'default_sharing_priority' => :'defaultSharingPriority',
        :'user' => :'user',
        :'permitted_read_user_ids' => :'permittedReadUserIds',
        :'permitted_write_user_ids' => :'permittedWriteUserIds',
        :'referenced_fact_sheet_ids' => :'referencedFactSheetIds',
        :'views' => :'views',
        :'replay_sequence' => :'replaySequence',
        :'temporary' => :'temporary',
        :'o_data_enabled' => :'oDataEnabled'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'user_id' => :'String',
        :'name' => :'String',
        :'type' => :'String',
        :'group_key' => :'String',
        :'state' => :'Hash<String, Object>',
        :'working_copy' => :'BookmarkWorkingCopy',
        :'description' => :'String',
        :'created_at' => :'Time',
        :'updated_at' => :'Time',
        :'i18n_key' => :'String',
        :'predefined' => :'Boolean',
        :'readonly' => :'Boolean',
        :'default_sharing_priority' => :'Integer',
        :'user' => :'User',
        :'permitted_read_user_ids' => :'Array<String>',
        :'permitted_write_user_ids' => :'Array<String>',
        :'referenced_fact_sheet_ids' => :'Array<String>',
        :'views' => :'Integer',
        :'replay_sequence' => :'Integer',
        :'temporary' => :'Boolean',
        :'o_data_enabled' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `LeanixApi::Bookmark` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `LeanixApi::Bookmark`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'user_id')
        self.user_id = attributes[:'user_id']
      else
        self.user_id = nil
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      else
        self.name = nil
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      else
        self.type = nil
      end

      if attributes.key?(:'group_key')
        self.group_key = attributes[:'group_key']
      end

      if attributes.key?(:'state')
        if (value = attributes[:'state']).is_a?(Hash)
          self.state = value
        end
      else
        self.state = nil
      end

      if attributes.key?(:'working_copy')
        self.working_copy = attributes[:'working_copy']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end

      if attributes.key?(:'i18n_key')
        self.i18n_key = attributes[:'i18n_key']
      end

      if attributes.key?(:'predefined')
        self.predefined = attributes[:'predefined']
      else
        self.predefined = false
      end

      if attributes.key?(:'readonly')
        self.readonly = attributes[:'readonly']
      else
        self.readonly = false
      end

      if attributes.key?(:'default_sharing_priority')
        self.default_sharing_priority = attributes[:'default_sharing_priority']
      end

      if attributes.key?(:'user')
        self.user = attributes[:'user']
      end

      if attributes.key?(:'permitted_read_user_ids')
        if (value = attributes[:'permitted_read_user_ids']).is_a?(Array)
          self.permitted_read_user_ids = value
        end
      else
        self.permitted_read_user_ids = nil
      end

      if attributes.key?(:'permitted_write_user_ids')
        if (value = attributes[:'permitted_write_user_ids']).is_a?(Array)
          self.permitted_write_user_ids = value
        end
      else
        self.permitted_write_user_ids = nil
      end

      if attributes.key?(:'referenced_fact_sheet_ids')
        if (value = attributes[:'referenced_fact_sheet_ids']).is_a?(Array)
          self.referenced_fact_sheet_ids = value
        end
      else
        self.referenced_fact_sheet_ids = nil
      end

      if attributes.key?(:'views')
        self.views = attributes[:'views']
      else
        self.views = nil
      end

      if attributes.key?(:'replay_sequence')
        self.replay_sequence = attributes[:'replay_sequence']
      end

      if attributes.key?(:'temporary')
        self.temporary = attributes[:'temporary']
      else
        self.temporary = false
      end

      if attributes.key?(:'o_data_enabled')
        self.o_data_enabled = attributes[:'o_data_enabled']
      else
        self.o_data_enabled = false
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @user_id.nil?
        invalid_properties.push('invalid value for "user_id", user_id cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @type.nil?
        invalid_properties.push('invalid value for "type", type cannot be nil.')
      end

      if @state.nil?
        invalid_properties.push('invalid value for "state", state cannot be nil.')
      end

      if @readonly.nil?
        invalid_properties.push('invalid value for "readonly", readonly cannot be nil.')
      end

      if @permitted_read_user_ids.nil?
        invalid_properties.push('invalid value for "permitted_read_user_ids", permitted_read_user_ids cannot be nil.')
      end

      if @permitted_write_user_ids.nil?
        invalid_properties.push('invalid value for "permitted_write_user_ids", permitted_write_user_ids cannot be nil.')
      end

      if @referenced_fact_sheet_ids.nil?
        invalid_properties.push('invalid value for "referenced_fact_sheet_ids", referenced_fact_sheet_ids cannot be nil.')
      end

      if @views.nil?
        invalid_properties.push('invalid value for "views", views cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @user_id.nil?
      return false if @name.nil?
      return false if @type.nil?
      type_validator = EnumAttributeValidator.new('String', ["INVENTORY", "REPORTING", "VISUALIZER", "DASHBOARD", "INVENTORY_EXPORT"])
      return false unless type_validator.valid?(@type)
      return false if @state.nil?
      return false if @readonly.nil?
      return false if @permitted_read_user_ids.nil?
      return false if @permitted_write_user_ids.nil?
      return false if @referenced_fact_sheet_ids.nil?
      return false if @views.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      validator = EnumAttributeValidator.new('String', ["INVENTORY", "REPORTING", "VISUALIZER", "DASHBOARD", "INVENTORY_EXPORT"])
      unless validator.valid?(type)
        fail ArgumentError, "invalid value for \"type\", must be one of #{validator.allowable_values}."
      end
      @type = type
    end

    # Custom attribute writer method with validation
    # @param [Object] permitted_read_user_ids Value to be assigned
    def permitted_read_user_ids=(permitted_read_user_ids)
      if permitted_read_user_ids.nil?
        fail ArgumentError, 'permitted_read_user_ids cannot be nil'
      end

      @permitted_read_user_ids = permitted_read_user_ids
    end

    # Custom attribute writer method with validation
    # @param [Object] permitted_write_user_ids Value to be assigned
    def permitted_write_user_ids=(permitted_write_user_ids)
      if permitted_write_user_ids.nil?
        fail ArgumentError, 'permitted_write_user_ids cannot be nil'
      end

      @permitted_write_user_ids = permitted_write_user_ids
    end

    # Custom attribute writer method with validation
    # @param [Object] referenced_fact_sheet_ids Value to be assigned
    def referenced_fact_sheet_ids=(referenced_fact_sheet_ids)
      if referenced_fact_sheet_ids.nil?
        fail ArgumentError, 'referenced_fact_sheet_ids cannot be nil'
      end

      @referenced_fact_sheet_ids = referenced_fact_sheet_ids
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          user_id == o.user_id &&
          name == o.name &&
          type == o.type &&
          group_key == o.group_key &&
          state == o.state &&
          working_copy == o.working_copy &&
          description == o.description &&
          created_at == o.created_at &&
          updated_at == o.updated_at &&
          i18n_key == o.i18n_key &&
          predefined == o.predefined &&
          readonly == o.readonly &&
          default_sharing_priority == o.default_sharing_priority &&
          user == o.user &&
          permitted_read_user_ids == o.permitted_read_user_ids &&
          permitted_write_user_ids == o.permitted_write_user_ids &&
          referenced_fact_sheet_ids == o.referenced_fact_sheet_ids &&
          views == o.views &&
          replay_sequence == o.replay_sequence &&
          temporary == o.temporary &&
          o_data_enabled == o.o_data_enabled
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, user_id, name, type, group_key, state, working_copy, description, created_at, updated_at, i18n_key, predefined, readonly, default_sharing_priority, user, permitted_read_user_ids, permitted_write_user_ids, referenced_fact_sheet_ids, views, replay_sequence, temporary, o_data_enabled].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = LeanixApi.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
